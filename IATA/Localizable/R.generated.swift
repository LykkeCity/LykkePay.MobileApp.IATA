//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `GothamProBold.ttf`.
    static let gothamProBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamProBold", pathExtension: "ttf")
    /// Resource file `GothamProLight.ttf`.
    static let gothamProLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamProLight", pathExtension: "ttf")
    /// Resource file `GothamProMed.otf`.
    static let gothamProMedOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamProMed", pathExtension: "otf")
    /// Resource file `GothamProReg.otf`.
    static let gothamProRegOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamProReg", pathExtension: "otf")
    /// Resource file `LICENSE`.
    static let licensE = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "")
    /// Resource file `lykkexnet.crt`.
    static let lykkexnetCrt = Rswift.FileResource(bundle: R.hostingBundle, name: "lykkexnet", pathExtension: "crt")
    
    /// `bundle.url(forResource: "GothamProBold", withExtension: "ttf")`
    static func gothamProBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GothamProLight", withExtension: "ttf")`
    static func gothamProLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GothamProMed", withExtension: "otf")`
    static func gothamProMedOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProMedOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GothamProReg", withExtension: "otf")`
    static func gothamProRegOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProRegOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "LICENSE", withExtension: "")`
    static func licensE(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licensE
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "lykkexnet", withExtension: "crt")`
    static func lykkexnetCrt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lykkexnetCrt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `GothamPro-Bold`.
    static let gothamProBold = Rswift.FontResource(fontName: "GothamPro-Bold")
    /// Font `GothamPro-Light`.
    static let gothamProLight = Rswift.FontResource(fontName: "GothamPro-Light")
    /// Font `GothamPro-Medium`.
    static let gothamProMedium = Rswift.FontResource(fontName: "GothamPro-Medium")
    /// Font `GothamPro`.
    static let gothamPro = Rswift.FontResource(fontName: "GothamPro")
    
    /// `UIFont(name: "GothamPro", size: ...)`
    static func gothamPro(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamPro, size: size)
    }
    
    /// `UIFont(name: "GothamPro-Bold", size: ...)`
    static func gothamProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProBold, size: size)
    }
    
    /// `UIFont(name: "GothamPro-Light", size: ...)`
    static func gothamProLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProLight, size: size)
    }
    
    /// `UIFont(name: "GothamPro-Medium", size: ...)`
    static func gothamProMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProMedium, size: size)
    }
    
    static func validate() throws {
      if R.font.gothamProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Bold' could not be loaded, is 'GothamProBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamPro(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro' could not be loaded, is 'GothamProReg.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Light' could not be loaded, is 'GothamProLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Medium' could not be loaded, is 'GothamProMed.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 31 images.
  struct image {
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `Splash`.
    static let splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "Splash")
    /// Image `arrow_down_icon`.
    static let arrow_down_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_down_icon")
    /// Image `backIcon`.
    static let backIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "backIcon")
    /// Image `checkmark_icon`.
    static let checkmark_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark_icon")
    /// Image `ic_active_thumb`.
    static let ic_active_thumb = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_active_thumb")
    /// Image `ic_bodyInvertIcn`.
    static let ic_bodyInvertIcn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bodyInvertIcn")
    /// Image `ic_bodyLogoutIcn`.
    static let ic_bodyLogoutIcn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bodyLogoutIcn")
    /// Image `ic_bodySettingsIcn`.
    static let ic_bodySettingsIcn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bodySettingsIcn")
    /// Image `ic_body_dispute`.
    static let ic_body_dispute = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_body_dispute")
    /// Image `ic_delete`.
    static let ic_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete")
    /// Image `ic_disactive_thumb`.
    static let ic_disactive_thumb = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_disactive_thumb")
    /// Image `ic_dispute`.
    static let ic_dispute = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dispute")
    /// Image `ic_eurFlagMediumIcn`.
    static let ic_eurFlagMediumIcn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eurFlagMediumIcn")
    /// Image `ic_eurFlagSmallIcn`.
    static let ic_eurFlagSmallIcn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eurFlagSmallIcn")
    /// Image `ic_exchangeActive`.
    static let ic_exchangeActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_exchangeActive")
    /// Image `ic_exchangeNormal`.
    static let ic_exchangeNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_exchangeNormal")
    /// Image `ic_filter`.
    static let ic_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_filter")
    /// Image `ic_group2`.
    static let ic_group2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_group2")
    /// Image `ic_historyActive`.
    static let ic_historyActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_historyActive")
    /// Image `ic_historyNormal`.
    static let ic_historyNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_historyNormal")
    /// Image `ic_invoicesActive`.
    static let ic_invoicesActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_invoicesActive")
    /// Image `ic_invoicesNormal`.
    static let ic_invoicesNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_invoicesNormal")
    /// Image `ic_settingsActive`.
    static let ic_settingsActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_settingsActive")
    /// Image `ic_settingsNormal`.
    static let ic_settingsNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_settingsNormal")
    /// Image `ic_touch`.
    static let ic_touch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_touch")
    /// Image `ic_usFlagMediumIcn`.
    static let ic_usFlagMediumIcn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_usFlagMediumIcn")
    /// Image `ic_usFlagSmallIcn`.
    static let ic_usFlagSmallIcn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_usFlagSmallIcn")
    /// Image `ic_walletsActive`.
    static let ic_walletsActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_walletsActive")
    /// Image `ic_walletsNormal`.
    static let ic_walletsNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_walletsNormal")
    /// Image `logoSmallIcn`.
    static let logoSmallIcn = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoSmallIcn")
    
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Splash", bundle: ..., traitCollection: ...)`
    static func splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_down_icon", bundle: ..., traitCollection: ...)`
    static func arrow_down_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_down_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backIcon", bundle: ..., traitCollection: ...)`
    static func backIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkmark_icon", bundle: ..., traitCollection: ...)`
    static func checkmark_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmark_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_active_thumb", bundle: ..., traitCollection: ...)`
    static func ic_active_thumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_active_thumb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bodyInvertIcn", bundle: ..., traitCollection: ...)`
    static func ic_bodyInvertIcn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bodyInvertIcn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bodyLogoutIcn", bundle: ..., traitCollection: ...)`
    static func ic_bodyLogoutIcn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bodyLogoutIcn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bodySettingsIcn", bundle: ..., traitCollection: ...)`
    static func ic_bodySettingsIcn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bodySettingsIcn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_body_dispute", bundle: ..., traitCollection: ...)`
    static func ic_body_dispute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_body_dispute, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_delete", bundle: ..., traitCollection: ...)`
    static func ic_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_disactive_thumb", bundle: ..., traitCollection: ...)`
    static func ic_disactive_thumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_disactive_thumb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_dispute", bundle: ..., traitCollection: ...)`
    static func ic_dispute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dispute, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_eurFlagMediumIcn", bundle: ..., traitCollection: ...)`
    static func ic_eurFlagMediumIcn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_eurFlagMediumIcn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_eurFlagSmallIcn", bundle: ..., traitCollection: ...)`
    static func ic_eurFlagSmallIcn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_eurFlagSmallIcn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_exchangeActive", bundle: ..., traitCollection: ...)`
    static func ic_exchangeActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_exchangeActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_exchangeNormal", bundle: ..., traitCollection: ...)`
    static func ic_exchangeNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_exchangeNormal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_filter", bundle: ..., traitCollection: ...)`
    static func ic_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_filter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_group2", bundle: ..., traitCollection: ...)`
    static func ic_group2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_group2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_historyActive", bundle: ..., traitCollection: ...)`
    static func ic_historyActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_historyActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_historyNormal", bundle: ..., traitCollection: ...)`
    static func ic_historyNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_historyNormal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_invoicesActive", bundle: ..., traitCollection: ...)`
    static func ic_invoicesActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_invoicesActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_invoicesNormal", bundle: ..., traitCollection: ...)`
    static func ic_invoicesNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_invoicesNormal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_settingsActive", bundle: ..., traitCollection: ...)`
    static func ic_settingsActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_settingsActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_settingsNormal", bundle: ..., traitCollection: ...)`
    static func ic_settingsNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_settingsNormal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_touch", bundle: ..., traitCollection: ...)`
    static func ic_touch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_touch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_usFlagMediumIcn", bundle: ..., traitCollection: ...)`
    static func ic_usFlagMediumIcn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_usFlagMediumIcn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_usFlagSmallIcn", bundle: ..., traitCollection: ...)`
    static func ic_usFlagSmallIcn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_usFlagSmallIcn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_walletsActive", bundle: ..., traitCollection: ...)`
    static func ic_walletsActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_walletsActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_walletsNormal", bundle: ..., traitCollection: ...)`
    static func ic_walletsNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_walletsNormal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logoSmallIcn", bundle: ..., traitCollection: ...)`
    static func logoSmallIcn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoSmallIcn, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 25 nibs.
  struct nib {
    /// Nib `BaseCurrencyCollectionViewCell`.
    static let baseCurrencyCollectionViewCell = _R.nib._BaseCurrencyCollectionViewCell()
    /// Nib `ChangePasswordViewController`.
    static let changePasswordViewController = _R.nib._ChangePasswordViewController()
    /// Nib `DisputInvoiceViewController`.
    static let disputInvoiceViewController = _R.nib._DisputInvoiceViewController()
    /// Nib `DisputeTableViewCell`.
    static let disputeTableViewCell = _R.nib._DisputeTableViewCell()
    /// Nib `DisputeViewController`.
    static let disputeViewController = _R.nib._DisputeViewController()
    /// Nib `ExhangeViewController`.
    static let exhangeViewController = _R.nib._ExhangeViewController()
    /// Nib `HistoryTableViewCell`.
    static let historyTableViewCell = _R.nib._HistoryTableViewCell()
    /// Nib `HistoryViewController`.
    static let historyViewController = _R.nib._HistoryViewController()
    /// Nib `InvoiceHeaderView`.
    static let invoiceHeaderView = _R.nib._InvoiceHeaderView()
    /// Nib `InvoiceSettingsTableViewCell`.
    static let invoiceSettingsTableViewCell = _R.nib._InvoiceSettingsTableViewCell()
    /// Nib `InvoiceSettingsViewController`.
    static let invoiceSettingsViewController = _R.nib._InvoiceSettingsViewController()
    /// Nib `InvoiceTableViewCell`.
    static let invoiceTableViewCell = _R.nib._InvoiceTableViewCell()
    /// Nib `InvoiceViewController`.
    static let invoiceViewController = _R.nib._InvoiceViewController()
    /// Nib `InvoiceView`.
    static let invoiceView = _R.nib._InvoiceView()
    /// Nib `PasswordContainerView`.
    static let passwordContainerView = _R.nib._PasswordContainerView()
    /// Nib `PaymentRangeTableViewCell`.
    static let paymentRangeTableViewCell = _R.nib._PaymentRangeTableViewCell()
    /// Nib `PinViewController`.
    static let pinViewController = _R.nib._PinViewController()
    /// Nib `SettingsViewController`.
    static let settingsViewController = _R.nib._SettingsViewController()
    /// Nib `SignInViewController`.
    static let signInViewController = _R.nib._SignInViewController()
    /// Nib `TabBarView`.
    static let tabBarView = _R.nib._TabBarView()
    /// Nib `TransactionTableViewCell`.
    static let transactionTableViewCell = _R.nib._TransactionTableViewCell()
    /// Nib `TransactionTableViewHeader`.
    static let transactionTableViewHeader = _R.nib._TransactionTableViewHeader()
    /// Nib `TransactionViewController`.
    static let transactionViewController = _R.nib._TransactionViewController()
    /// Nib `WalletsTableViewCell`.
    static let walletsTableViewCell = _R.nib._WalletsTableViewCell()
    /// Nib `WalletsViewController`.
    static let walletsViewController = _R.nib._WalletsViewController()
    
    /// `UINib(name: "BaseCurrencyCollectionViewCell", in: bundle)`
    static func baseCurrencyCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.baseCurrencyCollectionViewCell)
    }
    
    /// `UINib(name: "ChangePasswordViewController", in: bundle)`
    static func changePasswordViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.changePasswordViewController)
    }
    
    /// `UINib(name: "DisputInvoiceViewController", in: bundle)`
    static func disputInvoiceViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.disputInvoiceViewController)
    }
    
    /// `UINib(name: "DisputeTableViewCell", in: bundle)`
    static func disputeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.disputeTableViewCell)
    }
    
    /// `UINib(name: "DisputeViewController", in: bundle)`
    static func disputeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.disputeViewController)
    }
    
    /// `UINib(name: "ExhangeViewController", in: bundle)`
    static func exhangeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.exhangeViewController)
    }
    
    /// `UINib(name: "HistoryTableViewCell", in: bundle)`
    static func historyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.historyTableViewCell)
    }
    
    /// `UINib(name: "HistoryViewController", in: bundle)`
    static func historyViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.historyViewController)
    }
    
    /// `UINib(name: "InvoiceHeaderView", in: bundle)`
    static func invoiceHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invoiceHeaderView)
    }
    
    /// `UINib(name: "InvoiceSettingsTableViewCell", in: bundle)`
    static func invoiceSettingsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invoiceSettingsTableViewCell)
    }
    
    /// `UINib(name: "InvoiceSettingsViewController", in: bundle)`
    static func invoiceSettingsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invoiceSettingsViewController)
    }
    
    /// `UINib(name: "InvoiceTableViewCell", in: bundle)`
    static func invoiceTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invoiceTableViewCell)
    }
    
    /// `UINib(name: "InvoiceView", in: bundle)`
    static func invoiceView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invoiceView)
    }
    
    /// `UINib(name: "InvoiceViewController", in: bundle)`
    static func invoiceViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invoiceViewController)
    }
    
    /// `UINib(name: "PasswordContainerView", in: bundle)`
    static func passwordContainerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.passwordContainerView)
    }
    
    /// `UINib(name: "PaymentRangeTableViewCell", in: bundle)`
    static func paymentRangeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentRangeTableViewCell)
    }
    
    /// `UINib(name: "PinViewController", in: bundle)`
    static func pinViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pinViewController)
    }
    
    /// `UINib(name: "SettingsViewController", in: bundle)`
    static func settingsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsViewController)
    }
    
    /// `UINib(name: "SignInViewController", in: bundle)`
    static func signInViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signInViewController)
    }
    
    /// `UINib(name: "TabBarView", in: bundle)`
    static func tabBarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tabBarView)
    }
    
    /// `UINib(name: "TransactionTableViewCell", in: bundle)`
    static func transactionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionTableViewCell)
    }
    
    /// `UINib(name: "TransactionTableViewHeader", in: bundle)`
    static func transactionTableViewHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionTableViewHeader)
    }
    
    /// `UINib(name: "TransactionViewController", in: bundle)`
    static func transactionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionViewController)
    }
    
    /// `UINib(name: "WalletsTableViewCell", in: bundle)`
    static func walletsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletsTableViewCell)
    }
    
    /// `UINib(name: "WalletsViewController", in: bundle)`
    static func walletsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletsViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BaseCurrencyCollectionViewCell`.
    static let baseCurrencyCollectionViewCell: Rswift.ReuseIdentifier<BaseCurrencyCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "BaseCurrencyCollectionViewCell")
    /// Reuse identifier `WalletsTableViewCell`.
    static let walletsTableViewCell: Rswift.ReuseIdentifier<WalletsTableViewCell> = Rswift.ReuseIdentifier(identifier: "WalletsTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 71 localization keys.
    struct localizable {
      /// Base translation: %@ invoices selected
      /// 
      /// Locales: Base
      static let invoiceScreenItemsCountSelected = Rswift.StringResource(key: "Invoice.Screen.Items.CountSelected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: 1 invoice selected
      /// 
      /// Locales: Base
      static let invoiceScreenItemsOneSelected = Rswift.StringResource(key: "Invoice.Screen.Items.OneSelected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Airlines
      /// 
      /// Locales: Base
      static let invoiceSettingsAirlinesTitle = Rswift.StringResource(key: "Invoice.Settings.Airlines.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: All invoices
      /// 
      /// Locales: Base
      static let invoiceNavigationFilteringTitleAllInvoices = Rswift.StringResource(key: "Invoice.Navigation.Filtering.Title.AllInvoices", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Amount
      /// 
      /// Locales: Base
      static let historyTransactionDetailsAmount = Rswift.StringResource(key: "History.Transaction.Details.Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Billing Categories
      /// 
      /// Locales: Base
      static let invoiceSettingsBillingCategoriesTitle = Rswift.StringResource(key: "Invoice.Settings.BillingCategories.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Billing Category
      /// 
      /// Locales: Base
      static let historyTransactionDetailsBillingCategory = Rswift.StringResource(key: "History.Transaction.Details.BillingCategory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Block Height
      /// 
      /// Locales: Base
      static let historyTransactionDetailsBlockHeight = Rswift.StringResource(key: "History.Transaction.Details.BlockHeight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static let commonNavBarCancel = Rswift.StringResource(key: "Common.NavBar.Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static let settingLogoutItemCancel = Rswift.StringResource(key: "Setting.Logout.Item.Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Cancel Dispute
      /// 
      /// Locales: Base
      static let invoiceScreenItemsCancelDispute = Rswift.StringResource(key: "Invoice.Screen.Items.CancelDispute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Change a password
      /// 
      /// Locales: Base
      static let changePasswordNavBarTitle = Rswift.StringResource(key: "ChangePassword.NavBar.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Close
      /// 
      /// Locales: Base
      static let commonNavBarClose = Rswift.StringResource(key: "Common.NavBar.Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Confirm your PIN code
      /// 
      /// Locales: Base
      static let pinResubmitTitle = Rswift.StringResource(key: "Pin.Resubmit.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Currencies
      /// 
      /// Locales: Base
      static let invoiceSettingsCurrenciesTitle = Rswift.StringResource(key: "Invoice.Settings.Currencies.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Current password
      /// 
      /// Locales: Base
      static let changePasswordPlaceholderCurrentPassword = Rswift.StringResource(key: "ChangePassword.Placeholder.CurrentPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: DISPUTE
      /// 
      /// Locales: Base
      static let invoiceStatusItemsDispute = Rswift.StringResource(key: "Invoice.Status.Items.Dispute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Dispute
      /// 
      /// Locales: Base
      static let invoiceDisputeTitle = Rswift.StringResource(key: "Invoice.Dispute.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Dispute
      /// 
      /// Locales: Base
      static let invoiceNavigationFilteringTitleDispute = Rswift.StringResource(key: "Invoice.Navigation.Filtering.Title.Dispute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Dispute
      /// 
      /// Locales: Base
      static let invoiceScreenItemsDispute = Rswift.StringResource(key: "Invoice.Screen.Items.Dispute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Dispute invoice
      /// 
      /// Locales: Base
      static let invoiceDisputInvoice = Rswift.StringResource(key: "Invoice.Disput.Invoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Done
      /// 
      /// Locales: Base
      static let commonNavBarDone = Rswift.StringResource(key: "Common.NavBar.Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ERROR
      /// 
      /// Locales: Base
      static let invoiceStatusItemsInternalError = Rswift.StringResource(key: "Invoice.Status.Items.InternalError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ERROR
      /// 
      /// Locales: Base
      static let invoiceStatusItemsOverpaid = Rswift.StringResource(key: "Invoice.Status.Items.Overpaid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: EXCHANGE
      /// 
      /// Locales: Base
      static let tabBarExchangeItemTitle = Rswift.StringResource(key: "TabBar.ExchangeItem.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Error
      /// 
      /// Locales: Base
      static let commonTitleError = Rswift.StringResource(key: "Common.Title.Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Fields are not equal
      /// 
      /// Locales: Base
      static let changePasswordFieldNotEqualsError = Rswift.StringResource(key: "ChangePassword.FieldNotEquals.Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Filters
      /// 
      /// Locales: Base
      static let invoiceSettingsFilterTitle = Rswift.StringResource(key: "Invoice.Settings.Filter.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: From
      /// 
      /// Locales: Base
      static let invoiceSettingsRangeFrom = Rswift.StringResource(key: "Invoice.Settings.Range.From", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: From Value cannot exceed To Value
      /// 
      /// Locales: Base
      static let invoiceSettingsErrorFrom = Rswift.StringResource(key: "Invoice.Settings.Error.From", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: HISTORY
      /// 
      /// Locales: Base
      static let tabBarHistoryItemTitle = Rswift.StringResource(key: "TabBar.HistoryItem.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: History
      /// 
      /// Locales: Base
      static let historyScreenTitle = Rswift.StringResource(key: "History.Screen.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: IN PROGRESS
      /// 
      /// Locales: Base
      static let invoiceStatusItemsInProgress = Rswift.StringResource(key: "Invoice.Status.Items.InProgress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: INVOICES
      /// 
      /// Locales: Base
      static let tabBarInvoicesItemTitle = Rswift.StringResource(key: "TabBar.InvoicesItem.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Invoice Number
      /// 
      /// Locales: Base
      static let historyTransactionDetailsInvoiceNumber = Rswift.StringResource(key: "History.Transaction.Details.InvoiceNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: LATE PAID
      /// 
      /// Locales: Base
      static let invoiceStatusItemsLatepaid = Rswift.StringResource(key: "Invoice.Status.Items.Latepaid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Log out
      /// 
      /// Locales: Base
      static let settingLogoutItemLogout = Rswift.StringResource(key: "Setting.Logout.Item.Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Login
      /// 
      /// Locales: Base
      static let signInPlaceholderLogin = Rswift.StringResource(key: "SignIn.Placeholder.Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: New password
      /// 
      /// Locales: Base
      static let changePasswordPlaceholderNewPassword = Rswift.StringResource(key: "ChangePassword.Placeholder.NewPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: New password again
      /// 
      /// Locales: Base
      static let changePasswordPlaceholderNewPasswordAgain = Rswift.StringResource(key: "ChangePassword.Placeholder.NewPasswordAgain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Ok
      /// 
      /// Locales: Base
      static let commonPositiveButtonOk = Rswift.StringResource(key: "Common.PositiveButton.Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: PAID
      /// 
      /// Locales: Base
      static let invoiceStatusItemsPaid = Rswift.StringResource(key: "Invoice.Status.Items.Paid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: PARTIALLY PAID
      /// 
      /// Locales: Base
      static let invoiceStatusItemsUnderpaid = Rswift.StringResource(key: "Invoice.Status.Items.Underpaid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: PAST DUE
      /// 
      /// Locales: Base
      static let invoiceStatusItemsPastDue = Rswift.StringResource(key: "Invoice.Status.Items.PastDue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Paid By
      /// 
      /// Locales: Base
      static let historyTransactionDetailsPaidBy = Rswift.StringResource(key: "History.Transaction.Details.PaidBy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Paid invoices
      /// 
      /// Locales: Base
      static let invoiceNavigationFilteringTitlePaid = Rswift.StringResource(key: "Invoice.Navigation.Filtering.Title.Paid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Password
      /// 
      /// Locales: Base
      static let signInPlaceholderPassword = Rswift.StringResource(key: "SignIn.Placeholder.Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Pay
      /// 
      /// Locales: Base
      static let invoiceScreenPay = Rswift.StringResource(key: "Invoice.Screen.Pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Pay %@ against the selected invoices?
      /// 
      /// Locales: Base
      static let invoiceScreenPaymentMessage = Rswift.StringResource(key: "Invoice.Screen.PaymentMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Payment Range
      /// 
      /// Locales: Base
      static let invoiceSettingsPaymentRangeTitle = Rswift.StringResource(key: "Invoice.Settings.PaymentRange.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please confirm
      /// 
      /// Locales: Base
      static let invoiceScreenPleaseConfirmPayment = Rswift.StringResource(key: "Invoice.Screen.PleaseConfirmPayment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter your PIN code
      /// 
      /// Locales: Base
      static let pinValidationTitle = Rswift.StringResource(key: "Pin.Validation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SETTINGS
      /// 
      /// Locales: Base
      static let tabBarSettingsItemTitle = Rswift.StringResource(key: "TabBar.SettingsItem.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Settlement Period
      /// 
      /// Locales: Base
      static let invoiceSettingsSettlementPeriodTitle = Rswift.StringResource(key: "Invoice.Settings.SettlementPeriod.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Setup your PIN code
      /// 
      /// Locales: Base
      static let pinSetupTitle = Rswift.StringResource(key: "Pin.Setup.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Sold By
      /// 
      /// Locales: Base
      static let historyTransactionDetailsSoldBy = Rswift.StringResource(key: "History.Transaction.Details.SoldBy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Something is going wrong, please, try again.
      /// 
      /// Locales: Base
      static let commonErrorInternal = Rswift.StringResource(key: "Common.Error.Internal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Status
      /// 
      /// Locales: Base
      static let historyTransactionDetailsStatus = Rswift.StringResource(key: "History.Transaction.Details.Status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Submit your PIN code again
      /// 
      /// Locales: Base
      static let pinErrorTitle = Rswift.StringResource(key: "Pin.Error.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Success
      /// 
      /// Locales: Base
      static let commonSuccessMessage = Rswift.StringResource(key: "Common.Success.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: The CurrentPasssword field is required.
      /// 
      /// Locales: Base
      static let changePasswordFieldEmptyError = Rswift.StringResource(key: "ChangePassword.FieldEmpty.Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: TimeStamp
      /// 
      /// Locales: Base
      static let historyTransactionDetailsTimeStamp = Rswift.StringResource(key: "History.Transaction.Details.TimeStamp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: To
      /// 
      /// Locales: Base
      static let invoiceSettingsRangeTo = Rswift.StringResource(key: "Invoice.Settings.Range.To", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: To Value cannot be less From Value
      /// 
      /// Locales: Base
      static let invoiceSettingsErrorTo = Rswift.StringResource(key: "Invoice.Settings.Error.To", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Transaction details
      /// 
      /// Locales: Base
      static let historyTransactionScreenTitle = Rswift.StringResource(key: "History.Transaction.Screen.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: TxHash
      /// 
      /// Locales: Base
      static let historyTransactionDetailsTxHash = Rswift.StringResource(key: "History.Transaction.Details.TxHash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Unpaid invoices
      /// 
      /// Locales: Base
      static let invoiceNavigationFilteringTitleUnPaidInvoices = Rswift.StringResource(key: "Invoice.Navigation.Filtering.Title.UnPaidInvoices", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: WALLETS
      /// 
      /// Locales: Base
      static let tabBarWalletsItemTitle = Rswift.StringResource(key: "TabBar.WalletsItem.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Welcome back! Sign in to  continue to IATA
      /// 
      /// Locales: Base
      static let signInLabelWelcomeMessage = Rswift.StringResource(key: "SignIn.Label.Welcome.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: You cannot pay more then required
      /// 
      /// Locales: Base
      static let invoiceScreenErrorChangingAmount = Rswift.StringResource(key: "Invoice.Screen.Error.ChangingAmount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Your comment
      /// 
      /// Locales: Base
      static let invoiceDisputInvoicePlaceholderTextField = Rswift.StringResource(key: "Invoice.Disput.Invoice.Placeholder.TextField", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      
      /// Base translation: %@ invoices selected
      /// 
      /// Locales: Base
      static func invoiceScreenItemsCountSelected(_ value1: String) -> String {
        return String(format: NSLocalizedString("Invoice.Screen.Items.CountSelected", bundle: R.hostingBundle, value: "%@ invoices selected", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: 1 invoice selected
      /// 
      /// Locales: Base
      static func invoiceScreenItemsOneSelected(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Screen.Items.OneSelected", bundle: R.hostingBundle, value: "1 invoice selected", comment: "")
      }
      
      /// Base translation: Airlines
      /// 
      /// Locales: Base
      static func invoiceSettingsAirlinesTitle(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Settings.Airlines.Title", bundle: R.hostingBundle, value: "Airlines", comment: "")
      }
      
      /// Base translation: All invoices
      /// 
      /// Locales: Base
      static func invoiceNavigationFilteringTitleAllInvoices(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Navigation.Filtering.Title.AllInvoices", bundle: R.hostingBundle, value: "All invoices", comment: "")
      }
      
      /// Base translation: Amount
      /// 
      /// Locales: Base
      static func historyTransactionDetailsAmount(_: Void = ()) -> String {
        return NSLocalizedString("History.Transaction.Details.Amount", bundle: R.hostingBundle, value: "Amount", comment: "")
      }
      
      /// Base translation: Billing Categories
      /// 
      /// Locales: Base
      static func invoiceSettingsBillingCategoriesTitle(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Settings.BillingCategories.Title", bundle: R.hostingBundle, value: "Billing Categories", comment: "")
      }
      
      /// Base translation: Billing Category
      /// 
      /// Locales: Base
      static func historyTransactionDetailsBillingCategory(_: Void = ()) -> String {
        return NSLocalizedString("History.Transaction.Details.BillingCategory", bundle: R.hostingBundle, value: "Billing Category", comment: "")
      }
      
      /// Base translation: Block Height
      /// 
      /// Locales: Base
      static func historyTransactionDetailsBlockHeight(_: Void = ()) -> String {
        return NSLocalizedString("History.Transaction.Details.BlockHeight", bundle: R.hostingBundle, value: "Block Height", comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static func commonNavBarCancel(_: Void = ()) -> String {
        return NSLocalizedString("Common.NavBar.Cancel", bundle: R.hostingBundle, value: "Cancel", comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static func settingLogoutItemCancel(_: Void = ()) -> String {
        return NSLocalizedString("Setting.Logout.Item.Cancel", bundle: R.hostingBundle, value: "Cancel", comment: "")
      }
      
      /// Base translation: Cancel Dispute
      /// 
      /// Locales: Base
      static func invoiceScreenItemsCancelDispute(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Screen.Items.CancelDispute", bundle: R.hostingBundle, value: "Cancel Dispute", comment: "")
      }
      
      /// Base translation: Change a password
      /// 
      /// Locales: Base
      static func changePasswordNavBarTitle(_: Void = ()) -> String {
        return NSLocalizedString("ChangePassword.NavBar.Title", bundle: R.hostingBundle, value: "Change a password", comment: "")
      }
      
      /// Base translation: Close
      /// 
      /// Locales: Base
      static func commonNavBarClose(_: Void = ()) -> String {
        return NSLocalizedString("Common.NavBar.Close", bundle: R.hostingBundle, value: "Close", comment: "")
      }
      
      /// Base translation: Confirm your PIN code
      /// 
      /// Locales: Base
      static func pinResubmitTitle(_: Void = ()) -> String {
        return NSLocalizedString("Pin.Resubmit.Title", bundle: R.hostingBundle, value: "Confirm your PIN code", comment: "")
      }
      
      /// Base translation: Currencies
      /// 
      /// Locales: Base
      static func invoiceSettingsCurrenciesTitle(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Settings.Currencies.Title", bundle: R.hostingBundle, value: "Currencies", comment: "")
      }
      
      /// Base translation: Current password
      /// 
      /// Locales: Base
      static func changePasswordPlaceholderCurrentPassword(_: Void = ()) -> String {
        return NSLocalizedString("ChangePassword.Placeholder.CurrentPassword", bundle: R.hostingBundle, value: "Current password", comment: "")
      }
      
      /// Base translation: DISPUTE
      /// 
      /// Locales: Base
      static func invoiceStatusItemsDispute(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Status.Items.Dispute", bundle: R.hostingBundle, value: "DISPUTE", comment: "")
      }
      
      /// Base translation: Dispute
      /// 
      /// Locales: Base
      static func invoiceDisputeTitle(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Dispute.Title", bundle: R.hostingBundle, value: "Dispute", comment: "")
      }
      
      /// Base translation: Dispute
      /// 
      /// Locales: Base
      static func invoiceNavigationFilteringTitleDispute(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Navigation.Filtering.Title.Dispute", bundle: R.hostingBundle, value: "Dispute", comment: "")
      }
      
      /// Base translation: Dispute
      /// 
      /// Locales: Base
      static func invoiceScreenItemsDispute(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Screen.Items.Dispute", bundle: R.hostingBundle, value: "Dispute", comment: "")
      }
      
      /// Base translation: Dispute invoice
      /// 
      /// Locales: Base
      static func invoiceDisputInvoice(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Disput.Invoice", bundle: R.hostingBundle, value: "Dispute invoice", comment: "")
      }
      
      /// Base translation: Done
      /// 
      /// Locales: Base
      static func commonNavBarDone(_: Void = ()) -> String {
        return NSLocalizedString("Common.NavBar.Done", bundle: R.hostingBundle, value: "Done", comment: "")
      }
      
      /// Base translation: ERROR
      /// 
      /// Locales: Base
      static func invoiceStatusItemsInternalError(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Status.Items.InternalError", bundle: R.hostingBundle, value: "ERROR", comment: "")
      }
      
      /// Base translation: ERROR
      /// 
      /// Locales: Base
      static func invoiceStatusItemsOverpaid(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Status.Items.Overpaid", bundle: R.hostingBundle, value: "ERROR", comment: "")
      }
      
      /// Base translation: EXCHANGE
      /// 
      /// Locales: Base
      static func tabBarExchangeItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("TabBar.ExchangeItem.Title", bundle: R.hostingBundle, value: "EXCHANGE", comment: "")
      }
      
      /// Base translation: Error
      /// 
      /// Locales: Base
      static func commonTitleError(_: Void = ()) -> String {
        return NSLocalizedString("Common.Title.Error", bundle: R.hostingBundle, value: "Error", comment: "")
      }
      
      /// Base translation: Fields are not equal
      /// 
      /// Locales: Base
      static func changePasswordFieldNotEqualsError(_: Void = ()) -> String {
        return NSLocalizedString("ChangePassword.FieldNotEquals.Error", bundle: R.hostingBundle, value: "Fields are not equal", comment: "")
      }
      
      /// Base translation: Filters
      /// 
      /// Locales: Base
      static func invoiceSettingsFilterTitle(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Settings.Filter.Title", bundle: R.hostingBundle, value: "Filters", comment: "")
      }
      
      /// Base translation: From
      /// 
      /// Locales: Base
      static func invoiceSettingsRangeFrom(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Settings.Range.From", bundle: R.hostingBundle, value: "From", comment: "")
      }
      
      /// Base translation: From Value cannot exceed To Value
      /// 
      /// Locales: Base
      static func invoiceSettingsErrorFrom(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Settings.Error.From", bundle: R.hostingBundle, value: "From Value cannot exceed To Value", comment: "")
      }
      
      /// Base translation: HISTORY
      /// 
      /// Locales: Base
      static func tabBarHistoryItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("TabBar.HistoryItem.Title", bundle: R.hostingBundle, value: "HISTORY", comment: "")
      }
      
      /// Base translation: History
      /// 
      /// Locales: Base
      static func historyScreenTitle(_: Void = ()) -> String {
        return NSLocalizedString("History.Screen.Title", bundle: R.hostingBundle, value: "History", comment: "")
      }
      
      /// Base translation: IN PROGRESS
      /// 
      /// Locales: Base
      static func invoiceStatusItemsInProgress(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Status.Items.InProgress", bundle: R.hostingBundle, value: "IN PROGRESS", comment: "")
      }
      
      /// Base translation: INVOICES
      /// 
      /// Locales: Base
      static func tabBarInvoicesItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("TabBar.InvoicesItem.Title", bundle: R.hostingBundle, value: "INVOICES", comment: "")
      }
      
      /// Base translation: Invoice Number
      /// 
      /// Locales: Base
      static func historyTransactionDetailsInvoiceNumber(_: Void = ()) -> String {
        return NSLocalizedString("History.Transaction.Details.InvoiceNumber", bundle: R.hostingBundle, value: "Invoice Number", comment: "")
      }
      
      /// Base translation: LATE PAID
      /// 
      /// Locales: Base
      static func invoiceStatusItemsLatepaid(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Status.Items.Latepaid", bundle: R.hostingBundle, value: "LATE PAID", comment: "")
      }
      
      /// Base translation: Log out
      /// 
      /// Locales: Base
      static func settingLogoutItemLogout(_: Void = ()) -> String {
        return NSLocalizedString("Setting.Logout.Item.Logout", bundle: R.hostingBundle, value: "Log out", comment: "")
      }
      
      /// Base translation: Login
      /// 
      /// Locales: Base
      static func signInPlaceholderLogin(_: Void = ()) -> String {
        return NSLocalizedString("SignIn.Placeholder.Login", bundle: R.hostingBundle, value: "Login", comment: "")
      }
      
      /// Base translation: New password
      /// 
      /// Locales: Base
      static func changePasswordPlaceholderNewPassword(_: Void = ()) -> String {
        return NSLocalizedString("ChangePassword.Placeholder.NewPassword", bundle: R.hostingBundle, value: "New password", comment: "")
      }
      
      /// Base translation: New password again
      /// 
      /// Locales: Base
      static func changePasswordPlaceholderNewPasswordAgain(_: Void = ()) -> String {
        return NSLocalizedString("ChangePassword.Placeholder.NewPasswordAgain", bundle: R.hostingBundle, value: "New password again", comment: "")
      }
      
      /// Base translation: Ok
      /// 
      /// Locales: Base
      static func commonPositiveButtonOk(_: Void = ()) -> String {
        return NSLocalizedString("Common.PositiveButton.Ok", bundle: R.hostingBundle, value: "Ok", comment: "")
      }
      
      /// Base translation: PAID
      /// 
      /// Locales: Base
      static func invoiceStatusItemsPaid(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Status.Items.Paid", bundle: R.hostingBundle, value: "PAID", comment: "")
      }
      
      /// Base translation: PARTIALLY PAID
      /// 
      /// Locales: Base
      static func invoiceStatusItemsUnderpaid(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Status.Items.Underpaid", bundle: R.hostingBundle, value: "PARTIALLY PAID", comment: "")
      }
      
      /// Base translation: PAST DUE
      /// 
      /// Locales: Base
      static func invoiceStatusItemsPastDue(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Status.Items.PastDue", bundle: R.hostingBundle, value: "PAST DUE", comment: "")
      }
      
      /// Base translation: Paid By
      /// 
      /// Locales: Base
      static func historyTransactionDetailsPaidBy(_: Void = ()) -> String {
        return NSLocalizedString("History.Transaction.Details.PaidBy", bundle: R.hostingBundle, value: "Paid By", comment: "")
      }
      
      /// Base translation: Paid invoices
      /// 
      /// Locales: Base
      static func invoiceNavigationFilteringTitlePaid(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Navigation.Filtering.Title.Paid", bundle: R.hostingBundle, value: "Paid invoices", comment: "")
      }
      
      /// Base translation: Password
      /// 
      /// Locales: Base
      static func signInPlaceholderPassword(_: Void = ()) -> String {
        return NSLocalizedString("SignIn.Placeholder.Password", bundle: R.hostingBundle, value: "Password", comment: "")
      }
      
      /// Base translation: Pay
      /// 
      /// Locales: Base
      static func invoiceScreenPay(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Screen.Pay", bundle: R.hostingBundle, value: "Pay", comment: "")
      }
      
      /// Base translation: Pay %@ against the selected invoices?
      /// 
      /// Locales: Base
      static func invoiceScreenPaymentMessage(_ value1: String) -> String {
        return String(format: NSLocalizedString("Invoice.Screen.PaymentMessage", bundle: R.hostingBundle, value: "Pay %@ against the selected invoices?", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Payment Range
      /// 
      /// Locales: Base
      static func invoiceSettingsPaymentRangeTitle(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Settings.PaymentRange.Title", bundle: R.hostingBundle, value: "Payment Range", comment: "")
      }
      
      /// Base translation: Please confirm
      /// 
      /// Locales: Base
      static func invoiceScreenPleaseConfirmPayment(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Screen.PleaseConfirmPayment", bundle: R.hostingBundle, value: "Please confirm", comment: "")
      }
      
      /// Base translation: Please enter your PIN code
      /// 
      /// Locales: Base
      static func pinValidationTitle(_: Void = ()) -> String {
        return NSLocalizedString("Pin.Validation.Title", bundle: R.hostingBundle, value: "Please enter your PIN code", comment: "")
      }
      
      /// Base translation: SETTINGS
      /// 
      /// Locales: Base
      static func tabBarSettingsItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("TabBar.SettingsItem.Title", bundle: R.hostingBundle, value: "SETTINGS", comment: "")
      }
      
      /// Base translation: Settlement Period
      /// 
      /// Locales: Base
      static func invoiceSettingsSettlementPeriodTitle(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Settings.SettlementPeriod.Title", bundle: R.hostingBundle, value: "Settlement Period", comment: "")
      }
      
      /// Base translation: Setup your PIN code
      /// 
      /// Locales: Base
      static func pinSetupTitle(_: Void = ()) -> String {
        return NSLocalizedString("Pin.Setup.Title", bundle: R.hostingBundle, value: "Setup your PIN code", comment: "")
      }
      
      /// Base translation: Sold By
      /// 
      /// Locales: Base
      static func historyTransactionDetailsSoldBy(_: Void = ()) -> String {
        return NSLocalizedString("History.Transaction.Details.SoldBy", bundle: R.hostingBundle, value: "Sold By", comment: "")
      }
      
      /// Base translation: Something is going wrong, please, try again.
      /// 
      /// Locales: Base
      static func commonErrorInternal(_: Void = ()) -> String {
        return NSLocalizedString("Common.Error.Internal", bundle: R.hostingBundle, value: "Something is going wrong, please, try again.", comment: "")
      }
      
      /// Base translation: Status
      /// 
      /// Locales: Base
      static func historyTransactionDetailsStatus(_: Void = ()) -> String {
        return NSLocalizedString("History.Transaction.Details.Status", bundle: R.hostingBundle, value: "Status", comment: "")
      }
      
      /// Base translation: Submit your PIN code again
      /// 
      /// Locales: Base
      static func pinErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("Pin.Error.Title", bundle: R.hostingBundle, value: "Submit your PIN code again", comment: "")
      }
      
      /// Base translation: Success
      /// 
      /// Locales: Base
      static func commonSuccessMessage(_: Void = ()) -> String {
        return NSLocalizedString("Common.Success.Message", bundle: R.hostingBundle, value: "Success", comment: "")
      }
      
      /// Base translation: The CurrentPasssword field is required.
      /// 
      /// Locales: Base
      static func changePasswordFieldEmptyError(_: Void = ()) -> String {
        return NSLocalizedString("ChangePassword.FieldEmpty.Error", bundle: R.hostingBundle, value: "The CurrentPasssword field is required.", comment: "")
      }
      
      /// Base translation: TimeStamp
      /// 
      /// Locales: Base
      static func historyTransactionDetailsTimeStamp(_: Void = ()) -> String {
        return NSLocalizedString("History.Transaction.Details.TimeStamp", bundle: R.hostingBundle, value: "TimeStamp", comment: "")
      }
      
      /// Base translation: To
      /// 
      /// Locales: Base
      static func invoiceSettingsRangeTo(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Settings.Range.To", bundle: R.hostingBundle, value: "To", comment: "")
      }
      
      /// Base translation: To Value cannot be less From Value
      /// 
      /// Locales: Base
      static func invoiceSettingsErrorTo(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Settings.Error.To", bundle: R.hostingBundle, value: "To Value cannot be less From Value", comment: "")
      }
      
      /// Base translation: Transaction details
      /// 
      /// Locales: Base
      static func historyTransactionScreenTitle(_: Void = ()) -> String {
        return NSLocalizedString("History.Transaction.Screen.Title", bundle: R.hostingBundle, value: "Transaction details", comment: "")
      }
      
      /// Base translation: TxHash
      /// 
      /// Locales: Base
      static func historyTransactionDetailsTxHash(_: Void = ()) -> String {
        return NSLocalizedString("History.Transaction.Details.TxHash", bundle: R.hostingBundle, value: "TxHash", comment: "")
      }
      
      /// Base translation: Unpaid invoices
      /// 
      /// Locales: Base
      static func invoiceNavigationFilteringTitleUnPaidInvoices(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Navigation.Filtering.Title.UnPaidInvoices", bundle: R.hostingBundle, value: "Unpaid invoices", comment: "")
      }
      
      /// Base translation: WALLETS
      /// 
      /// Locales: Base
      static func tabBarWalletsItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("TabBar.WalletsItem.Title", bundle: R.hostingBundle, value: "WALLETS", comment: "")
      }
      
      /// Base translation: Welcome back! Sign in to  continue to IATA
      /// 
      /// Locales: Base
      static func signInLabelWelcomeMessage(_: Void = ()) -> String {
        return NSLocalizedString("SignIn.Label.Welcome.Message", bundle: R.hostingBundle, value: "Welcome back! Sign in to \ncontinue to IATA", comment: "")
      }
      
      /// Base translation: You cannot pay more then required
      /// 
      /// Locales: Base
      static func invoiceScreenErrorChangingAmount(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Screen.Error.ChangingAmount", bundle: R.hostingBundle, value: "You cannot pay more then required", comment: "")
      }
      
      /// Base translation: Your comment
      /// 
      /// Locales: Base
      static func invoiceDisputInvoicePlaceholderTextField(_: Void = ()) -> String {
        return NSLocalizedString("Invoice.Disput.Invoice.Placeholder.TextField", bundle: R.hostingBundle, value: "Your comment", comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _TabBarView.validate()
      try _InvoiceSettingsTableViewCell.validate()
      try _InvoiceView.validate()
      try _PinViewController.validate()
      try _SettingsViewController.validate()
      try _WalletsViewController.validate()
      try _TransactionTableViewHeader.validate()
      try _SignInViewController.validate()
      try _PasswordContainerView.validate()
      try _HistoryTableViewCell.validate()
      try _ExhangeViewController.validate()
    }
    
    struct _BaseCurrencyCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BaseCurrencyCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "BaseCurrencyCollectionViewCell"
      let name = "BaseCurrencyCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BaseCurrencyCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BaseCurrencyCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ChangePasswordViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChangePasswordViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DisputInvoiceViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DisputInvoiceViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DisputeTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DisputeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DisputeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DisputeTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DisputeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DisputeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ExhangeViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ExhangeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_bodyInvertIcn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bodyInvertIcn' is used in nib 'ExhangeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_usFlagMediumIcn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_usFlagMediumIcn' is used in nib 'ExhangeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_eurFlagMediumIcn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_eurFlagMediumIcn' is used in nib 'ExhangeViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HistoryTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HistoryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo' is used in nib 'HistoryTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HistoryViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HistoryViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _InvoiceHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InvoiceHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InvoiceHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvoiceHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _InvoiceSettingsTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InvoiceSettingsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InvoiceSettingsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvoiceSettingsTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo' is used in nib 'InvoiceSettingsTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _InvoiceSettingsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InvoiceSettingsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _InvoiceTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InvoiceTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InvoiceTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InvoiceTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _InvoiceView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InvoiceView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_body_dispute", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_body_dispute' is used in nib 'InvoiceView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _InvoiceViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InvoiceViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PasswordContainerView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PasswordContainerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PasswordContainerView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PasswordContainerView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_touch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_touch' is used in nib 'PasswordContainerView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete' is used in nib 'PasswordContainerView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentRangeTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PaymentRangeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PaymentRangeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentRangeTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PinViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PinViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo' is used in nib 'PinViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SettingsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_group2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_group2' is used in nib 'SettingsViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SignInViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignInViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo' is used in nib 'SignInViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TabBarView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TabBarView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tabBarItem:iP0-Nt-uZo:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:iP0-Nt-uZo:image' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:HOX-5I-GuR:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:HOX-5I-GuR:image' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:bsa-Hb-wVe:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:bsa-Hb-wVe:image' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:n8d-7A-YIx:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:n8d-7A-YIx:image' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:xBw-ch-3J1:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:xBw-ch-3J1:image' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:xBw-ch-3J1:selectedImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:xBw-ch-3J1:selectedImage' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:22C-7m-6pg:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:22C-7m-6pg:image' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:aby-Wi-xaE:selectedImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:aby-Wi-xaE:selectedImage' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:p4s-sn-nEZ:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:p4s-sn-nEZ:image' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:aFq-07-yrq:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:aFq-07-yrq:image' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:bsa-Hb-wVe:selectedImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:bsa-Hb-wVe:selectedImage' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:aby-Wi-xaE:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:aby-Wi-xaE:image' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:HOX-5I-GuR:selectedImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:HOX-5I-GuR:selectedImage' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:gNM-nb-sUY:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:gNM-nb-sUY:image' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:aFq-07-yrq:selectedImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:aFq-07-yrq:selectedImage' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:iP0-Nt-uZo:selectedImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:iP0-Nt-uZo:selectedImage' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:22C-7m-6pg:selectedImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:22C-7m-6pg:selectedImage' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:n8d-7A-YIx:selectedImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:n8d-7A-YIx:selectedImage' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:gNM-nb-sUY:selectedImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:gNM-nb-sUY:selectedImage' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarItem:p4s-sn-nEZ:selectedImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarItem:p4s-sn-nEZ:selectedImage' is used in nib 'TabBarView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TransactionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionTableViewHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TransactionTableViewHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo' is used in nib 'TransactionTableViewHeader', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _WalletsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WalletsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "WalletsTableViewCell"
      let name = "WalletsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WalletsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _WalletsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logoSmallIcn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoSmallIcn' is used in nib 'WalletsViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Splash") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
